/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	cr�ation : 13 f�vrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)

package yaka;

import compilateur.*;
import exceptions.*;

public class Yaka {
	public static TabIdent tabIdent;
	public static Declaration decl;
	public static Expression expr;
	public static AbstractGeneration gen;


  public static void printErrorMsg(String msg)
  {
		System.out.println("Error (l."+token.beginLine+") : "+msg);    
  }


  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    tabIdent = new TabIdent();
    decl = new Declaration(tabIdent);
    expr = new Expression(tabIdent);
    gen = new ASM("../out.asm");

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]);
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      
      System.out.println("analyse syntaxique reussie !\n");
      gen.closeFile();
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
    
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots r�serv�s*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
  {gen.header();}
   <PROGRAMME> <ident>	
   bloc()
   <FPROGRAMME>
   {gen.footer();}
}

void bloc() : {}{
 (declConst())*
 (declVar())*
 {
   gen.ouvrePrinc(tabIdent.nbVarDeclared()*2); }	
   suiteInstr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
  <ident>
   "=" valConst()
    
}

void valConst() : {String name = YakaTokenManager.identLu;}{
  <entier>  {
    try
    {
    	decl.addConst(name,Type.ENT,YakaTokenManager.entierLu);
    }
    catch (IdentAlreadyDeclaredException e)
    {
      printErrorMsg(e.getMessage());
    }  }
 | <ident>
 {
    try
    {		decl.addConstIdent(name,YakaTokenManager.identLu);
    }
    catch (Exception e)
    {
      printErrorMsg(e.getMessage());
    }
 }	
 | <VRAI> 	
 {
    try
    {
		decl.addConst(name,Type.BOOL,VRAI);
    }
    catch (IdentAlreadyDeclaredException e)
    {
      printErrorMsg(e.getMessage());
    }
 }		
 | <FAUX>
 {
    try
    {
		decl.addConst(name,Type.BOOL,FAUX);
    }
    catch (IdentAlreadyDeclaredException e)
    {
      printErrorMsg(e.getMessage());
    }
 }		
}


void declVar() : {}
{
  <VAR> type()  {
    int type = token.kind;  }
  <ident>
  {
    try
    {		decl.addVar(YakaTokenManager.identLu,type);
    }
    catch (IdentAlreadyDeclaredException e)
    {
      printErrorMsg(e.getMessage());
    }
  }
  ("," 
      <ident>  
  {
    try
    {        decl.addVar(YakaTokenManager.identLu,type);
    }
    catch (IdentAlreadyDeclaredException e)
    {
      printErrorMsg(e.getMessage());
    }
  }
  )* ";"
	
}

void type() :{}
{
   <ENTIER> 			
 | <BOOLEEN>	
}
/*
 * Syntaxe des instructions.
 */

void suiteInstr() :{}
{	instruction()
	(	";"
		(instruction())?
	)*
}

void instruction() :{expr.clear();}
{	affectation()
| 	lecture()
| 	ecriture()
}

void affectation() :{}
{	< ident >	{
	  String ident = YakaTokenManager.identLu;
	  if (!tabIdent.existeIdent(ident))
	  {
      		printErrorMsg(ident+" does not exist.");
			tabIdent.rangeIdent(ident,new IdVar(ident,Type.ERR));
	  }	}
	 "=" expression()
	 {
	   try
	   {	     		if (expr.getTypeExpr() != tabIdent.chercheIdent(ident).getType())
		{
      		printErrorMsg("type expected "+tabIdent.chercheIdent(ident).getType());
		}
		else
		{			gen.istore(tabIdent.chercheIdent(ident).getValeur());
		}
	   }
	   catch (Exception e)
	   {
      		printErrorMsg(e.getMessage());			
	   }
	 }
}

void lecture() :{}
{	< LIRE > "(" < ident >
	{
	  try
	  {	    gen.lire(tabIdent.chercheIdent(YakaTokenManager.identLu).getValeur());
	  }
	catch (Exception e)
	{
      		printErrorMsg(e.getMessage());	
	}

	} ")"
}

void ecriture() :{}
{	< ECRIRE > "(" (expression()	{
	  try
	  {	    Type.generateEcrireType(expr.getTypeExpr(),gen);
	  }
	  catch (Exception e)
	  {
      		printErrorMsg(e.getMessage());
	  }	} | < chaine > {gen.ecrireString(YakaTokenManager.chaineLue);}) ")" | < ALALIGNE > {gen.alaligne();}
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() //{System.out.println("D1"); gen.operation(expr.getOperateur());}
  )?
  {    expr.verifType();  }  
}

void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()	 {System.out.println("D2"); gen.operation(expr.getOperateur());}
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur() {System.out.println("D3"); gen.operation(expr.getOperateur());}  
  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {System.out.println("D4"); gen.operation(expr.getOperateur());}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 		{expr.ajouterType(Type.ENT);gen.iconst(YakaTokenManager.entierLu);}
 | <ident> 		{
   					try
   					{
						Ident id = tabIdent.chercheIdent(YakaTokenManager.identLu);
						id.generateIdent(gen);
   						expr.ajouterIdent(id);
   					}
   					catch (IdentDoesNotExistException e)
   					{
      					printErrorMsg(e.getMessage());	
   					}
   				}
 | <VRAI> 		{expr.ajouterType(Type.BOOL);gen.iconst(VRAI);}
 | <FAUX> 		{expr.ajouterType(Type.BOOL);gen.iconst(FAUX);}
 
}

void opRel() : {}
{
   "="  {expr.ajouterOp(Operateur.EQU);}
 | "<>" {expr.ajouterOp(Operateur.DIFF);}	
 | "<" 	{expr.ajouterOp(Operateur.INF);}	
 | "<=" {expr.ajouterOp(Operateur.INFE);}	
 | ">" 	{expr.ajouterOp(Operateur.SUP);}	
 | ">=" {expr.ajouterOp(Operateur.SUPE);}
 	
} 

void opAdd() : {}
{
    "+"		{expr.ajouterOp(Operateur.ADD);}
  |  "-"  	{expr.ajouterOp(Operateur.SUB);}
  | <OU> 	{expr.ajouterOp(Operateur.OR);}
}

void opMul() : {}
{
  "*"		{expr.ajouterOp(Operateur.MUL);}
  | "/"		{expr.ajouterOp(Operateur.DIV);}
  | <ET>	{expr.ajouterOp(Operateur.AND);}
} 

void opNeg() : {}
{ "-" 		{expr.ajouterOp(Operateur.NEG);}
 | <NON>	{expr.ajouterOp(Operateur.NOT);}
}


