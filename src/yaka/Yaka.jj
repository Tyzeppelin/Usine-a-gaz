/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	cr�ation : 13 f�vrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)

package yaka;

import compilateur.*;
import exceptions.*;

public class Yaka {
	public static TabIdent tabIdent = new TabIdent();
	public static Declaration decl = new Declaration();
	public static Expression expr = new Expression();
	public static AbstractGeneration gen = new ASM("../out.asm");

	private static int nbError = 0;
  public static void printErrorMsg(String msg)
  {
		System.out.println("Error (l."+token.beginLine+") : "+msg);
		nbError++;   
  }


  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]);
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie !\n");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    } finally
    {
      if (nbError==0)
      	gen.closeFile();
    }
    
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots r�serv�s*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
  {gen.header();}
   <PROGRAMME> <ident>
   (declFonction())*
   < PRINCIPAL >
   {
     	try
     	{
     	    gen.debut();
     		decl.addFonction("main");
    	}
    	catch (SemanticException e)
    	{
      		printErrorMsg(e.getMessage());
    	}
   }
   bloc()
   < FPRINCIPAL >
   <FPROGRAMME>
   {gen.footer();}
}

void declFonction() : {}{  type()  {    int type = token.kind;  }  < FONCTION > < ident >
  {
    String name = YakaTokenManager.identLu;
    try
    {
    	decl.addFonction(name,Type.intToType(type));
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }  }
  paramForms()   bloc()   < FFONCTION >
  {
    gen.fermeBloc(decl.getCurrentFonc().getNbParam()*2);
	tabIdent.clearLocaux();
  }}

void paramForms() : {}
{	"(" ( paramForm() ( "," paramForm())*)?	  ")"
	{		decl.getCurrentFonc().setOffsetParams();
	}
}

void paramForm() : {}{  type()  {    int type = token.kind;  }  < ident >
  {	String name = YakaTokenManager.identLu;
	try
    {
		decl.addParam(name,Type.intToType(type));
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }
  }}

void bloc() : {}
{
 (declConst())*
 (declVar())*
 {
   gen.ouvreBloc(decl.getCurrentFonc().getNom(),tabIdent.nbVarDeclared()*2); }	
   suiteInstr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
  <ident>
   "=" valConst()
    
}

void valConst() : {String name = YakaTokenManager.identLu;}{
  <entier>  {
    try
    {
    	decl.addConst(name,Type.ENT,YakaTokenManager.entierLu);
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }  }
 | <ident>
 {
    try
    {		decl.addConstIdent(name,YakaTokenManager.identLu);
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }
 }	
 | <VRAI> 	
 {
    try
    {
		decl.addConst(name,Type.BOOL,VRAI);
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }
 }		
 | <FAUX>
 {
    try
    {
		decl.addConst(name,Type.BOOL,FAUX);
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }
 }		
}


void declVar() : {}
{
  <VAR> type()  {
    int type = token.kind;  }
  <ident>
  {
    try
    {		decl.addVar(YakaTokenManager.identLu,type);
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }
  }
  ("," 
      <ident>  
  {
    try
    {        decl.addVar(YakaTokenManager.identLu,type);
    }
    catch (SemanticException e)
    {
      printErrorMsg(e.getMessage());
    }
  }
  )* ";"
	
}

void type() :{}
{
   <ENTIER> 			
 | <BOOLEEN>	
}
/*
 * Syntaxe des instructions.
 */

void suiteInstr() :{}
{	instruction()
	(	";"
		(instruction())?
	)*
}

void instruction() :{expr.clear();}
{	affectation()
| 	lecture()
| 	ecriture()
|   iteration()
|   condition()
|   retourne()
}

void retourne() :{}
{	< RETOURNE > expression()
	{		try
		{		  decl.testRetourneType(expr.getTypeExpr());
		  IdFonc fonc = decl.getCurrentFonc();
		  fonc.generateReturn(gen);
		}
		catch (SemanticException e)
		{
		  printErrorMsg(e.getMessage());			
		}
	}
}

void condition() : {}
{	< SI >
	{		gen.si();
	}
		expression()
		{
		    try
		    {
		      expr.testExpressionBoolean();
		    }
		    catch (SemanticException e)
		    {
		      printErrorMsg(e.getMessage());
		    }
		  	gen.iffauxCond();
		}
	< ALORS >
		suiteInstr()
		{			gen.sinon();
		}
	(< SINON >
		suiteInstr())?
	{	  gen.fsi();
	}
	< FSI >
}

void iteration() : {}{  < TANTQUE >  {
    gen.faire();  }  expression()  {    try    {      expr.testExpressionBoolean();    }    catch (SemanticException e)    {      printErrorMsg(e.getMessage());    }
    gen.iffauxIter();  }  < FAIRE >   suiteInstr()   < FAIT >
  {
    gen.fait();
  }}

void affectation() :{}
{
  {	ControlAffectation control = new ControlAffectation();
  }	< ident >	{
	  String ident = YakaTokenManager.identLu;
	  try
	  {	    control.controlIdent(ident);
	  }
	  catch (SemanticException e)
	  {
      	printErrorMsg(e.getMessage());
	  }	}
	 "=" expression()
	 {
	   try
	   {	     control.controlExpression(ident);
		 gen.istore(tabIdent.chercheIdentLocal(ident).getValeur());
	   }
	   catch (SemanticException e)
	   {
      		printErrorMsg(e.getMessage());			
	   }
	 }
}

void lecture() :{}
{	< LIRE > "(" < ident >
	{
	  try
	  {
	    int offset = tabIdent.chercheIdentLocal(YakaTokenManager.identLu).getValeur();	    gen.lire(offset);
	  }
	catch (SemanticException e)
	{
      		printErrorMsg(e.getMessage());	
	}

	} ")"
}

void ecriture() :{}
{	< ECRIRE > "(" (expression()	{
	  try
	  {
	    Type type = expr.getTypeExpr();	    Type.generateEcrireType(type,gen);
	  }
	  catch (SemanticException e)
	  {
      		printErrorMsg(e.getMessage());
	  }	} | < chaine > {gen.ecrireString(YakaTokenManager.chaineLue);}) ")" | < ALALIGNE > {gen.alaligne();}
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {gen.operation(expr.getOperateur());expr.verifType();}
  )?  
}

void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()	 {gen.operation(expr.getOperateur());expr.verifType();}
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur() {gen.operation(expr.getOperateur());expr.verifType();}  
  )*
}
void facteur() : {}
{   primaire()
  |  opNeg() primaire() {gen.operation(expr.getOperateur());expr.verifType();}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 		{expr.ajouterType(Type.ENT);gen.iconst(YakaTokenManager.entierLu);}
 | <ident> {
   String nameIdent=YakaTokenManager.identLu; }
(argumentsFonction())?
 				{
   					try
   					{
						Ident id = tabIdent.chercheIdent(nameIdent);
						id.generateIdent(gen);
   						expr.ajouterIdent(id);
   					}
   					catch (SemanticException e)
   					{
   					    expr.ajouterType(Type.ERR);
      					printErrorMsg(e.getMessage());	
   					}
   				}

   				
 | <VRAI> 		{expr.ajouterType(Type.BOOL);gen.iconst(VRAI);}
 | <FAUX> 		{expr.ajouterType(Type.BOOL);gen.iconst(FAUX);}
 
}
void argumentsFonction() : {String fonc = YakaTokenManager.identLu;int nbParam = 0;}{
  {
    gen.reserveRetour();
    ControlTypeFonction controlType = new ControlTypeFonction();
    try
	  {
	     controlType.initTest(fonc);
	  }
	  catch (SemanticException e)
	  {
      	printErrorMsg(e.getMessage());
	  }
  }  "("  (    expression()
    {
      nbParam++;
	  try
	  {	    controlType.testTypeParam(expr.getTypeExpr());
	  }
	  catch (SemanticException e)
	  {
      	printErrorMsg(e.getMessage());
	  }

    }    (      "," expression()
      {
      	  nbParam++;
          try
		  {
		    controlType.testTypeParam(expr.getTypeExpr());
		  }
		  catch (SemanticException e)
		  {
		  	printErrorMsg(e.getMessage());
		  }
      }    )*  )?  ")"
  {
		  try
		  {
		    controlType.testNbParam(nbParam);
  			expr.verifTypeFonc(fonc);
		  }
		  catch (SemanticException e)
		  {
		  	printErrorMsg(e.getMessage());
		  }
	}}

void opRel() : {}
{
   "="  {expr.ajouterOp(Operateur.EQU);}
 | "<>" {expr.ajouterOp(Operateur.DIFF);}	
 | "<" 	{expr.ajouterOp(Operateur.INF);}	
 | "<=" {expr.ajouterOp(Operateur.INFE);}	
 | ">" 	{expr.ajouterOp(Operateur.SUP);}	
 | ">=" {expr.ajouterOp(Operateur.SUPE);}
 	
} 

void opAdd() : {}
{
    "+"		{expr.ajouterOp(Operateur.ADD);}
  |  "-"  	{expr.ajouterOp(Operateur.SUB);}
  | <OU> 	{expr.ajouterOp(Operateur.OR);}
}

void opMul() : {}
{
  "*"		{expr.ajouterOp(Operateur.MUL);}
  | "/"		{expr.ajouterOp(Operateur.DIV);}
  | <ET>	{expr.ajouterOp(Operateur.AND);}
} 

void opNeg() : {}
{ "-" 		{expr.ajouterOp(Operateur.NEG);}
 | <NON>	{expr.ajouterOp(Operateur.NOT);}
}


